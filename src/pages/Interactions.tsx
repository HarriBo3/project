import React, { useState, useEffect } from 'react';
import { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';

const mfaMethods = [
  {
    name: 'SMS-Based OTP',
    convenience: 'High',
    security: 'Low',
    cost: 'Low',
    description: 'One-time passwords sent via SMS to your phone.',
  },
  {
    name: 'Authenticator Apps',
    convenience: 'Medium',
    security: 'Medium',
    cost: 'Low',
    description: 'Time-based one-time passwords generated by an app.',
  },
  {
    name: 'Hardware Tokens',
    convenience: 'Low',
    security: 'High',
    cost: 'High',
    description: 'Physical devices that generate authentication codes.',
  },
  {
    name: 'Biometric Authentication',
    convenience: 'High',
    security: 'High',
    cost: 'Medium',
    description: 'Uses fingerprint or facial recognition.',
  },
];

const securityTips = [
  'Use strong, unique passwords for each account.',
  'Enable two-factor authentication whenever possible.',
  'Be cautious of unsolicited emails and attachments.',
  'Keep your software and antivirus updated.',
  'Regularly back up important data.',
];



const mfaSetupSteps = [
  {
    method: 'Authenticator App',
    steps: [
      'Download an authenticator app (e.g., Google Authenticator, Authy).',
      'Navigate to your account settings on the website.',
      'Select "Enable Two-Factor Authentication" or similar.',
      'Scan the QR code displayed on the website using the app.',
      'Enter the verification code from the app to confirm.',
    ],
  },
  {
    method: 'SMS-Based OTP',
    steps: [
      'Navigate to your account settings on the website.',
      'Select "Enable SMS Authentication" or similar.',
      'Enter your mobile phone number.',
      'Enter the verification code sent to your phone to confirm.',
    ],
  },
  {
    method: 'Hardware Token',
    steps: [
      'Purchase a compatible hardware token (e.g., YubiKey).',
      'Navigate to your account settings on the website.',
      'Select "Enable Hardware Token" or similar.',
      'Insert the hardware token into your computer.',
      'Follow the on-screen instructions to register the device.',
    ],
  },
];

const quizQuestions = [
  {
    question: 'What is phishing?',
    options: [
      'A technique to catch fish',
      'A cyberattack that tricks users into revealing personal information',
      'A method of encrypting data',
      'An antivirus software',
    ],
    answer: 1,
  },
  {
    question: 'Which of the following is a sign of a phishing email?',
    options: [
      'Unexpected attachments',
      'Generic greetings like "Dear User"',
      'Urgent requests for personal information',
      'All of the above',
    ],
    answer: 3,
  },
  {
    question: 'What should you do if you receive a suspicious email?',
    options: [
      'Click on any links to see where they lead',
      'Delete the email without responding',
      'Forward it to everyone you know',
      'Reply asking for more information',
    ],
    answer: 1,
  },
  {
    question: 'How can you verify the legitimacy of an email sender?',
    options: [
      'Check the email address for inconsistencies',
      'Assume it is legitimate if it uses your name',
      'Trust emails with official logos',
      'All of the above',
    ],
    answer: 0,
  },
  {
    question: 'What is spear phishing?',
    options: [
      'A phishing attack targeting specific individuals or organizations',
      'A phishing attack that uses spear images',
      'A type of firewall',
      'A secure method of data transmission',
    ],
    answer: 0,
  },
];

const Interaction: React.FC = () => {
  // Security Tips Carousel
  const [currentTipIndex, setCurrentTipIndex] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTipIndex((prevIndex) =>
        prevIndex === securityTips.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000); // Change tip every 5 seconds
    return () => clearInterval(interval);
  }, []);

  // Interactive MFA Setup Guide
  const [selectedMethodIndex, setSelectedMethodIndex] = useState<number | null>(null);

  // Phishing Awareness Quiz
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedOption, setSelectedOption] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);

  const handleOptionSelect = (index: number) => {
    setSelectedOption(index);
  };

  const handleNextQuestion = () => {
    if (selectedOption === quizQuestions[currentQuestion].answer) {
      setScore(score + 1);
    }
    setSelectedOption(null);
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResult(true);
    }
  };

  // Security Checklist
  const [checklistItems, setChecklistItems] = useState([
    { text: 'I use unique passwords for different accounts.', checked: false },
    { text: 'I have enabled MFA on my important accounts.', checked: false },
    { text: 'I regularly update my software and antivirus.', checked: false },
    { text: 'I am cautious with emails from unknown senders.', checked: false },
    { text: 'I back up important data regularly.', checked: false },
  ]);

  const handleChecklistToggle = (index: number) => {
    const newItems = [...checklistItems];
    newItems[index].checked = !newItems[index].checked;
    setChecklistItems(newItems);
  };

  // Cybersecurity Threats Data Visualization
  const threatData = [
    { threat: 'Phishing', percentage: 38 },
    { threat: 'Malware', percentage: 17 },
    { threat: 'Ransomware', percentage: 13 },
    { threat: 'DDoS Attacks', percentage: 9 },
    { threat: 'Insider Threats', percentage: 23 },
  ];

  // Recent Cybersecurity News (Using Static Data)
  const newsArticles = [
    {
      title: 'New Ransomware Attack Targets Businesses',
      description: 'A new strain of ransomware is affecting businesses worldwide...',
      url: 'https://example.com/news1',
    },
    {
      title: 'Phishing Scams on the Rise',
      description: 'An increase in phishing scams has been reported...',
      url: 'https://example.com/news2',
    },
    {
      title: 'Data Breach Exposes Millions of Records',
      description: 'A significant data breach has exposed user data...',
      url: 'https://example.com/news3',
    },
    {
      title: 'Cybersecurity Best Practices for Remote Work',
      description: 'Experts share tips on staying secure while working remotely...',
      url: 'https://example.com/news4',
    },
    {
      title: 'Government Releases New Cybersecurity Guidelines',
      description: 'New guidelines aim to enhance national cybersecurity...',
      url: 'https://example.com/news5',
    },
  ];

  return (
    <div>
      {/* Quote Section */}
      <div className="text-center bg-gray-200 py-4 mt-10">
        <p className="text-lg italic font-semibold">
          “There’s no silver bullet with cybersecurity; a layered defense is the only viable option.” — James Scott.
        </p>
      </div>

      {/* Cybersecurity Tips */}
      <div className="mt-10">
        <h2 className="text-2xl font-bold text-center mb-6">Cybersecurity Tips</h2>
        <div className="bg-blue-100 p-6 shadow-md text-center">
          <p className="text-lg font-semibold">{securityTips[currentTipIndex]}</p>
          <div className="flex justify-center mt-4">
            {securityTips.map((_, index) => (
              <div
                key={index}
                className={`w-3 h-3 mx-1 rounded-full ${
                  index === currentTipIndex ? 'bg-blue-500' : 'bg-gray-300'
                }`}
              ></div>
            ))}
          </div>
        </div>
      </div>

      {/* Data Visualization */}
      <div className="mt-10 px-4">
        <h2 className="text-2xl font-bold text-center mb-6">Common Cybersecurity Threats</h2>
        <div className="max-w-xl mx-auto">
          {threatData.map((item, index) => (
            <div key={index} className="mb-4">
              <p className="font-semibold">
                {item.threat}: {item.percentage}%
              </p>
              <div className="w-full bg-gray-200 h-4 rounded">
                <div
                  className="h-4 bg-red-500 rounded"
                  style={{ width: `${item.percentage}%` }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* MFA Comparison Section */}
      <div className="mt-10 px-4">
        <h2 className="text-2xl font-bold text-center mb-6">Compare MFA Methods</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white shadow-md rounded-lg">
            <thead>
              <tr>
                <th className="py-3 px-5 bg-gray-200 text-left">MFA Method</th>
                <th className="py-3 px-5 bg-gray-200 text-left">Convenience</th>
                <th className="py-3 px-5 bg-gray-200 text-left">Security</th>
                <th className="py-3 px-5 bg-gray-200 text-left">Cost</th>
                <th className="py-3 px-5 bg-gray-200 text-left">Description</th>
              </tr>
            </thead>
            <tbody>
              {mfaMethods.map((method, index) => (
                <tr key={index} className="border-b">
                  <td className="py-3 px-5">{method.name}</td>
                  <td className="py-3 px-5">{method.convenience}</td>
                  <td className="py-3 px-5">{method.security}</td>
                  <td className="py-3 px-5">{method.cost}</td>
                  <td className="py-3 px-5">{method.description}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Security Checklist */}
      <div className="mt-10 px-4">
        <h2 className="text-2xl font-bold text-center mb-6">Security Checklist</h2>
        <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
          <ul>
            {checklistItems.map((item, index) => (
              <li key={index} className="flex items-center mb-2">
                <button onClick={() => handleChecklistToggle(index)} className="mr-2">
                  {item.checked ? (
                    <FaCheckCircle className="text-green-500" />
                  ) : (
                    <FaTimesCircle className="text-red-500" />
                  )}
                </button>
                <span>{item.text}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* Phishing Awareness Quiz */}
      <div className="mt-10 px-4">
        <h2 className="text-2xl font-bold text-center mb-6">Phishing Awareness Quiz</h2>
        <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow-md">
          {!showResult ? (
            <>
              <p className="text-lg font-semibold mb-4">
                Question {currentQuestion + 1}: {quizQuestions[currentQuestion].question}
              </p>
              <ul>
                {quizQuestions[currentQuestion].options.map((option, index) => (
                  <li key={index} className="mb-2">
                    <button
                      onClick={() => handleOptionSelect(index)}
                      className={`w-full text-left p-3 border rounded ${
                        selectedOption === index ? 'bg-blue-100' : ''
                      }`}
                    >
                      {option}
                    </button>
                  </li>
                ))}
              </ul>
              <button
                onClick={handleNextQuestion}
                disabled={selectedOption === null}
                className="mt-4 py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-700 disabled:opacity-50"
              >
                {currentQuestion < quizQuestions.length - 1 ? 'Next Question' : 'See Results'}
              </button>
            </>
          ) : (
            <div className="text-center">
              <p className="text-xl font-semibold mb-4">
                You scored {score} out of {quizQuestions.length}
              </p>
              <button
                onClick={() => {
                  setCurrentQuestion(0);
                  setScore(0);
                  setShowResult(false);
                }}
                className="py-2 px-4 bg-green-500 text-white rounded hover:bg-green-700"
              >
                Retake Quiz
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Interactive MFA Setup Guide */}
      <div className="mt-10 px-4 mb-10">
        <h2 className="text-2xl font-bold text-center mb-6">MFA Setup Guide</h2>
        <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow-md">
          {selectedMethodIndex === null ? (
            <>
              <p className="text-lg font-semibold mb-4">Select an MFA method to view setup steps:</p>
              <ul>
                {mfaSetupSteps.map((method, index) => (
                  <li key={index} className="mb-2">
                    <button
                      onClick={() => setSelectedMethodIndex(index)}
                      className="w-full text-left p-3 border rounded hover:bg-gray-100"
                    >
                      {method.method}
                    </button>
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <>
              <button
                onClick={() => setSelectedMethodIndex(null)}
                className="mb-4 text-blue-500 hover:underline"
              >
                &larr; Back to methods
              </button>
              <h3 className="text-xl font-semibold mb-4">
                How to set up {mfaSetupSteps[selectedMethodIndex].method}
              </h3>
              <ol className="list-decimal list-inside">
                {mfaSetupSteps[selectedMethodIndex].steps.map((step, index) => (
                  <li key={index} className="mb-2">
                    {step}
                  </li>
                ))}
              </ol>
            </>
          )}
        </div>
      </div>

      {/* Recent Cybersecurity News */}
      <div className="mt-10 px-4 mb-10">
        <h2 className="text-2xl font-bold text-center mb-6">Recent Cybersecurity News</h2>
        <div className="max-w-lg mx-auto bg-white p-6 rounded-lg shadow-md">
          {newsArticles.length > 0 ? (
            <ul>
              {newsArticles.map((article, index) => (
                <li key={index} className="mb-4">
                  <a href={article.url} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">
                    <p className="font-semibold">{article.title}</p>
                  </a>
                  <p className="text-sm text-gray-600">{article.description}</p>
                </li>
              ))}
            </ul>
          ) : (
            <p>No news articles available at the moment.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Interaction;
